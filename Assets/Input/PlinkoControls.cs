//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlinkoControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlinkoControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlinkoControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlinkoControls"",
    ""maps"": [
        {
            ""name"": ""Plinko"",
            ""id"": ""a981cd09-7d96-40ca-9d89-91eca1f972bb"",
            ""actions"": [
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""d3f3687a-5c50-460b-9b3a-04b34b641265"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""81bd90d8-5947-4b57-820b-54006989790e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c84813b8-5c91-4981-be46-d690ea198c39"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5b5d8f00-8bac-4e32-b97c-4500f0c3ceb6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cef7d56-934d-43ea-8287-1ea0796787f0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""874c8d4f-14c9-4c80-8948-14a523b16486"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""3179c086-0e5d-4742-9b31-d093e6b4bb07"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""643c7214-dc3e-4843-bfae-bfbf6a3c8256"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""af69c7ec-8a21-41a0-8f6d-2eb2280e058b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0ab1b629-56de-48eb-bae2-d6fa5ba1fcee"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4eee24ec-e5b5-4283-a648-6895ff82df12"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""87d89e1c-55aa-41e6-bdb8-831db92f52f5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""490abc0b-cfdb-479a-a01b-02b52212ed52"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""SlimeHole"",
            ""id"": ""64c7f564-d3bb-4fd5-9fcf-bb67f95b4e60"",
            ""actions"": [
                {
                    ""name"": ""Input"",
                    ""type"": ""Value"",
                    ""id"": ""4b5c009b-e682-4141-8fc3-8bc506858222"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""17cc5ae1-2b04-49bc-adf1-e5af0406bce3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NewInput"",
                    ""type"": ""Button"",
                    ""id"": ""8d9f1b11-d4c1-41ba-bed9-5237b492ed44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""9511f887-8862-4218-a389-977aa8725989"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Input"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9acf3c30-1e40-48e7-9fd8-ae5766a20cd0"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c58e13e5-1ab7-49d2-b8df-dc98e65ce0db"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4fded5c2-5422-420a-b81d-455e214252e3"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0ebd2bd9-efd9-4813-9e4f-d506850a062f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""267aa95e-273e-4e48-97fa-12dc213b53b7"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""527d94ae-f9c9-48a7-83bd-45e0021d2d92"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NewInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Skeeball"",
            ""id"": ""7c95ce2f-ad09-4b72-9657-df0bf1f8a09f"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""a3949da7-7a18-4d8c-8016-25a89c20e05a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""7dc310f8-9bec-47d6-9c9c-fbedaa44e50c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7c126c97-569d-498b-aa41-c3684c6fc728"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40065ca7-1e39-4a4f-b8e2-291b59245f02"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""479f5c39-d098-4467-9d2a-2ccc40448201"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""367021eb-92e7-46fd-a462-ba9bc6c05acd"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FoodThrowing"",
            ""id"": ""9c4deb8e-2e6f-4192-b884-951123db60a7"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""c49f6136-7238-49e1-bdbd-2dd787fa86e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9192296d-718c-4da0-be26-eab20274010a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37daf627-a049-4c05-a028-8564311130e9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Plinko
        m_Plinko = asset.FindActionMap("Plinko", throwIfNotFound: true);
        m_Plinko_Drop = m_Plinko.FindAction("Drop", throwIfNotFound: true);
        m_Plinko_Reset = m_Plinko.FindAction("Reset", throwIfNotFound: true);
        m_Plinko_Move = m_Plinko.FindAction("Move", throwIfNotFound: true);
        // SlimeHole
        m_SlimeHole = asset.FindActionMap("SlimeHole", throwIfNotFound: true);
        m_SlimeHole_Input = m_SlimeHole.FindAction("Input", throwIfNotFound: true);
        m_SlimeHole_Reset = m_SlimeHole.FindAction("Reset", throwIfNotFound: true);
        m_SlimeHole_NewInput = m_SlimeHole.FindAction("NewInput", throwIfNotFound: true);
        // Skeeball
        m_Skeeball = asset.FindActionMap("Skeeball", throwIfNotFound: true);
        m_Skeeball_Confirm = m_Skeeball.FindAction("Confirm", throwIfNotFound: true);
        m_Skeeball_Reset = m_Skeeball.FindAction("Reset", throwIfNotFound: true);
        // FoodThrowing
        m_FoodThrowing = asset.FindActionMap("FoodThrowing", throwIfNotFound: true);
        m_FoodThrowing_Touch = m_FoodThrowing.FindAction("Touch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Plinko
    private readonly InputActionMap m_Plinko;
    private List<IPlinkoActions> m_PlinkoActionsCallbackInterfaces = new List<IPlinkoActions>();
    private readonly InputAction m_Plinko_Drop;
    private readonly InputAction m_Plinko_Reset;
    private readonly InputAction m_Plinko_Move;
    public struct PlinkoActions
    {
        private @PlinkoControls m_Wrapper;
        public PlinkoActions(@PlinkoControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drop => m_Wrapper.m_Plinko_Drop;
        public InputAction @Reset => m_Wrapper.m_Plinko_Reset;
        public InputAction @Move => m_Wrapper.m_Plinko_Move;
        public InputActionMap Get() { return m_Wrapper.m_Plinko; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlinkoActions set) { return set.Get(); }
        public void AddCallbacks(IPlinkoActions instance)
        {
            if (instance == null || m_Wrapper.m_PlinkoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlinkoActionsCallbackInterfaces.Add(instance);
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlinkoActions instance)
        {
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlinkoActions instance)
        {
            if (m_Wrapper.m_PlinkoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlinkoActions instance)
        {
            foreach (var item in m_Wrapper.m_PlinkoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlinkoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlinkoActions @Plinko => new PlinkoActions(this);

    // SlimeHole
    private readonly InputActionMap m_SlimeHole;
    private List<ISlimeHoleActions> m_SlimeHoleActionsCallbackInterfaces = new List<ISlimeHoleActions>();
    private readonly InputAction m_SlimeHole_Input;
    private readonly InputAction m_SlimeHole_Reset;
    private readonly InputAction m_SlimeHole_NewInput;
    public struct SlimeHoleActions
    {
        private @PlinkoControls m_Wrapper;
        public SlimeHoleActions(@PlinkoControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Input => m_Wrapper.m_SlimeHole_Input;
        public InputAction @Reset => m_Wrapper.m_SlimeHole_Reset;
        public InputAction @NewInput => m_Wrapper.m_SlimeHole_NewInput;
        public InputActionMap Get() { return m_Wrapper.m_SlimeHole; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SlimeHoleActions set) { return set.Get(); }
        public void AddCallbacks(ISlimeHoleActions instance)
        {
            if (instance == null || m_Wrapper.m_SlimeHoleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SlimeHoleActionsCallbackInterfaces.Add(instance);
            @Input.started += instance.OnInput;
            @Input.performed += instance.OnInput;
            @Input.canceled += instance.OnInput;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @NewInput.started += instance.OnNewInput;
            @NewInput.performed += instance.OnNewInput;
            @NewInput.canceled += instance.OnNewInput;
        }

        private void UnregisterCallbacks(ISlimeHoleActions instance)
        {
            @Input.started -= instance.OnInput;
            @Input.performed -= instance.OnInput;
            @Input.canceled -= instance.OnInput;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @NewInput.started -= instance.OnNewInput;
            @NewInput.performed -= instance.OnNewInput;
            @NewInput.canceled -= instance.OnNewInput;
        }

        public void RemoveCallbacks(ISlimeHoleActions instance)
        {
            if (m_Wrapper.m_SlimeHoleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISlimeHoleActions instance)
        {
            foreach (var item in m_Wrapper.m_SlimeHoleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SlimeHoleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SlimeHoleActions @SlimeHole => new SlimeHoleActions(this);

    // Skeeball
    private readonly InputActionMap m_Skeeball;
    private List<ISkeeballActions> m_SkeeballActionsCallbackInterfaces = new List<ISkeeballActions>();
    private readonly InputAction m_Skeeball_Confirm;
    private readonly InputAction m_Skeeball_Reset;
    public struct SkeeballActions
    {
        private @PlinkoControls m_Wrapper;
        public SkeeballActions(@PlinkoControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Confirm => m_Wrapper.m_Skeeball_Confirm;
        public InputAction @Reset => m_Wrapper.m_Skeeball_Reset;
        public InputActionMap Get() { return m_Wrapper.m_Skeeball; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkeeballActions set) { return set.Get(); }
        public void AddCallbacks(ISkeeballActions instance)
        {
            if (instance == null || m_Wrapper.m_SkeeballActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SkeeballActionsCallbackInterfaces.Add(instance);
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
        }

        private void UnregisterCallbacks(ISkeeballActions instance)
        {
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
        }

        public void RemoveCallbacks(ISkeeballActions instance)
        {
            if (m_Wrapper.m_SkeeballActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISkeeballActions instance)
        {
            foreach (var item in m_Wrapper.m_SkeeballActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SkeeballActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SkeeballActions @Skeeball => new SkeeballActions(this);

    // FoodThrowing
    private readonly InputActionMap m_FoodThrowing;
    private List<IFoodThrowingActions> m_FoodThrowingActionsCallbackInterfaces = new List<IFoodThrowingActions>();
    private readonly InputAction m_FoodThrowing_Touch;
    public struct FoodThrowingActions
    {
        private @PlinkoControls m_Wrapper;
        public FoodThrowingActions(@PlinkoControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_FoodThrowing_Touch;
        public InputActionMap Get() { return m_Wrapper.m_FoodThrowing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FoodThrowingActions set) { return set.Get(); }
        public void AddCallbacks(IFoodThrowingActions instance)
        {
            if (instance == null || m_Wrapper.m_FoodThrowingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FoodThrowingActionsCallbackInterfaces.Add(instance);
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
        }

        private void UnregisterCallbacks(IFoodThrowingActions instance)
        {
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
        }

        public void RemoveCallbacks(IFoodThrowingActions instance)
        {
            if (m_Wrapper.m_FoodThrowingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFoodThrowingActions instance)
        {
            foreach (var item in m_Wrapper.m_FoodThrowingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FoodThrowingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FoodThrowingActions @FoodThrowing => new FoodThrowingActions(this);
    public interface IPlinkoActions
    {
        void OnDrop(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ISlimeHoleActions
    {
        void OnInput(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnNewInput(InputAction.CallbackContext context);
    }
    public interface ISkeeballActions
    {
        void OnConfirm(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
    public interface IFoodThrowingActions
    {
        void OnTouch(InputAction.CallbackContext context);
    }
}
